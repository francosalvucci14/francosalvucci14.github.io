[{"categories":null,"content":"Intro This is the project I did, in collaboration with my colleagues at the University, for the Database and Knowledge Base (BDC) exam. The project represents the reality of a taxi company (VroomA), which operates in the Rome area This is just the database, obviously above the database there is a web interface for users and system administrators Goals The main objective of this system is to allow users to organize travel by taxi according to their needs, the type of vehicle chosen and the cost of the chosen route. From a corporate point of view, the objectives are to evaluate the quality of the drivers' work through the feedback provided by customers and to improve the service where possible. Services The company roles are as follows: Drivers Maintenance workers Drivers will be able to choose whether to accept or refuse the ride, in this case specifying the reason for the refusal. They will also be able to leave feedback to the user regarding their behavior before and during the race. Each driver has their own private car, and can contact the company maintenance workers in the event of vehicle breakdown. Each driver is assigned one or more work shifts, with the constraint that the individual driver cannot be assigned to two work shifts that have the same start and end times. The maintenance workers can receive requests for assistance from the drivers and contact the affiliated workshops to carry out the assistance work. Workshops are not part of society. The types of vehicle available are as follows: Basic: 4 places available Plus: 7 seats available, used to transport wheelchairs for the disabled Premium: 12 seats available, used to transport wheelchairs for the disabled Every vehicle, uniquely identified by its license plate, must be insured in order to circulate. When you book a journey (route) you can choose two points: Departure, i.e. the way from where you want to start the race Arrival, i.e. the way where the race ends Each booking can be accepted or rejected based on certain needs of the user (E.g.: booking made in error) and of the driver (E.g.: unavailability of the service). Each completed route is associated with feedback that can be left by both the user and the driver. Each user can make unlimited booking requests, based on personal needs (number of passengers, people with disabilities, pick-up point, drop-off point), with the restriction of one trip at a time. Once the ride is completed, the user can leave feedback with a number of stars (from 1 to 5) and a comment. Each user must add a card with which to make the payment for the route made, at a later time they can add other payment methods according to their needs. Each user can add any of the routes taken by him to the ua favorites list, choosing whether to add only the route or also the driver. Each user can access the history of reservations made. Schemes Here we can see the diagrams of the database we created ","date":"2023-09-27","objectID":"/database-project/:0:0","tags":["Project","MySql"],"title":"DataBase Project","uri":"/database-project/"},{"categories":null,"content":"Conceptual Scheme Schema Concettuale ","date":"2023-09-27","objectID":"/database-project/:0:1","tags":["Project","MySql"],"title":"DataBase Project","uri":"/database-project/"},{"categories":null,"content":"Logical Scheme Schema Logico Code To see the code in detail, including the file for creating tables in SQL, and the file used for creating automatic insertions, refer to my Github repository Database Project ","date":"2023-09-27","objectID":"/database-project/:0:2","tags":["Project","MySql"],"title":"DataBase Project","uri":"/database-project/"},{"categories":null,"content":"Automatic Insertions in Python import random from faker import Faker import string import decimal import datetime from geopy.geocoders import Nominatim def getLatAndLong(posto): # calling the Nominatim tool and create Nominatim class loc = Nominatim(user_agent=\"Geopy Library\") # entering the location name getLoc = loc.geocode(posto) return getLoc.latitude, getLoc.longitude def prendi_due_elementi(array): # Scegli due indici casuali indice1, indice2 = random.sample(range(len(array)), 2) # Se gli elementi sono uguali, scegli un nuovo indice2 while array[indice1] == array[indice2]: indice2 = random.randint(0, len(array) - 1) return array[indice1], array[indice2] fake = Faker(\"it_IT\") #Funzione Rand.DDN def genRandomDate(): start_date = datetime.date(1975, 1, 1) end_date = datetime.date(2001, 12, 30) num_days = (end_date - start_date).days rand_days = random.randint(1, num_days) random_date = start_date + datetime.timedelta(days=rand_days) return random_date #Funzione Rand.DA def genRandomInsuranceDate(): start_date = datetime.date(2023, 1, 1) end_date = datetime.date(2025, 1, 1) num_days = (end_date - start_date).days rand_days = random.randint(1, num_days) random_date = start_date + datetime.timedelta(days=rand_days) return random_date #Funzione Rand.CD def genRandomCardDate(): start_date = datetime.date(2027, 1, 1) end_date = datetime.date(2034, 12, 30) num_days = (end_date - start_date).days rand_days = random.randint(1, num_days) random_date = start_date + datetime.timedelta(days=rand_days) return random_date #Funzione Rand.PD def genRandomLicenceDate(): start_date = datetime.date(2025, 1, 1) end_date = datetime.date(2035, 12, 30) num_days = (end_date - start_date).days rand_days = random.randint(1, num_days) random_date = start_date + datetime.timedelta(days=rand_days) return random_date #Funzione Rand.DDR def genRandomRequestDate(): start_date = datetime.date(2020, 1, 1) end_date = datetime.date(2024, 2, 16) num_days = (end_date - start_date).days rand_days = random.randint(1, num_days) random_date = start_date + datetime.timedelta(days=rand_days) return random_date #Funzione Rand.Mail def generateEmail(name, surname): domain = fake.domain_name() return f\"{name}.{surname}@{domain}\" #Funzione Rand.T def generateTarga(): SYMBOLS = \"ABCDEFG\" SYMBOLS_END = \"HIJKLMNOPQR\" NUMBERS = \"0123456789\" start = \"\".join(random.choice(SYMBOLS) for i in range(1)) start_2 = \"\".join(random.choice(SYMBOLS_END) for i in range(1)) mezzo = \"\".join(random.choice(NUMBERS) for i in range(3)) fine = \"\".join(random.choice(SYMBOLS) for i in range(2)) return start+start_2+mezzo+fine #Funzione Rand.PSW def generatePsw(): ALL = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\" psw = \"\".join(random.choice(ALL) for i in range(9)) return psw #Funzione Rand.CN def generateCardNumber(): NUMBERS = \"0123456789\" number = \"\".join(random.choice(NUMBERS) for i in range(16)) return number #Funzione Rand.Star def checkStelleUtenti(stelle): if stelle == 1: return 1 elif stelle == 2: return 2 elif stelle == 3: return 3 elif stelle == 4: return 4 elif stelle == 5: return 5 print(\"Inizio esecuzione...\") print(\"L'ORDINE DI ESECUZIONE DEI FILE √à 1.txt,2.txt,etc...\") print(\"Inizio Creazione 1.txt\") SYMBOLS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" NUMBERS = \"0123456789\" ALL_SYMBOLS = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\" print(\"Inizio Creazione 2.txt\") f = open(\"2.txt\",\"w+\") print(\"--------------- Inizio Inserimento Patente\\n\") patenti = [\"B\",\"BE\",\"B96\"] unique_Patente = [] values_patenti = [] for i in range(3000): data = genRandomLicenceDate() random_numpatente = \"\".join(random.choice(ALL_SYMBOLS) for i in range(9)) categoria = \"\".join(random.choice(patenti) for i in range(1)) unique_Patente.append(random_numpatente) query = \"('\"+ random_numpatente+ \"','\"+ str(data)+ \"','\"+ categoria+ \"')\" values_patenti.append(query) f.write( \"INSERT INTO Patenti (NumeroPatente,DDS,Categoria) VALUES \"+\",\\n\".join(values_patenti)+\";\" ) f.write(\"\\n\") print(\"--------------- Fine Inseriment","date":"2023-09-27","objectID":"/database-project/:0:3","tags":["Project","MySql"],"title":"DataBase Project","uri":"/database-project/"},{"categories":null,"content":"Idea Code Video ","date":"2023-04-24","objectID":"/webscraper/:0:0","tags":["Project","WebScraper","Python","Csv"],"title":"WebScraper","uri":"/webscraper/"},{"categories":null,"content":"The university The difficulties Thoughts and advice ","date":"2023-03-20","objectID":"/universit%C3%A0/:0:0","tags":["University"],"title":"University","uri":"/universit%C3%A0/"},{"categories":null,"content":"Idea The idea came to me totally random, while I wasn‚Äôt doing a damn thing üòÇ I saw some videos on youtube and I decided to approach this ‚Äúchallenge‚Äù (let‚Äôs put it in quotes because then we‚Äôll see that it‚Äôs not a real challenge) The idea behind it is very simple, an interface (let‚Äôs call it HOME) where there are links to other interfaces: Withdrawal, Deposit, User Shows and so on‚Ä¶ Services The services offered by this app are: Withdrawal of money from the account Deposit money into the account User shows Account search by account name Change account number by username Realization The app was created using the Java language, and uses a MySql database for data storage and modification The ide used is Ecplise All the interfaces were created using Java AWT, so the code will be unclear (I attach images of the interfaces) Code The code of this application can be found all on my GitHub Link here ‚Äì\u003e Bank App This is the screenshots of the interafaces Home Page: Home page Change Account Details: Change account details page Withdrawal: Withdrawal page Register User: Register User page Show User: Search User page Database The database was created on DBMS MySql, and is organized as follows: There are two tables, ‚ÄúUsers‚Äù and ‚ÄúCredit‚Äù In the Users table there are the following fields: UID -\u003e User ID (primary key) User -\u003e Username Pass -\u003e Password NConto -\u003e Current account number In the Credit table there are the following fields: CID -\u003e Account ID (primary key) UserID -\u003e User ID (subkey related to the UID key of the Users table) Credit -\u003e Account credit Every time a user is entered in the scheme, he is given an account number in a random way, with credit 0, and in the DB he is linked to the Credit table The tables are connected by a 1:1 relationship ","date":"2023-03-17","objectID":"/bankapp/:0:0","tags":["Project","Bank App","Java","MySql"],"title":"BankApp","uri":"/bankapp/"},{"categories":null,"content":"Me Hi, I‚Äôm Salvucci Franco. I am a student of the Faculty of Computer Science at Tor Vergata University I have always been passionate about the world of programming and information technology in general (both on the software and hardware side, but more so on software üòÑ) I love experimenting with new technologies (like this one here, aka Hugo) and always try new design/programming/etc challenges‚Ä¶ Currently I am particularly interested in the world of Algorithms, in fact I will probably focus my thesis on this (but for now let‚Äôs leave out this detail, there‚Äôs still a lot of time to think about that‚Ä¶) P.S : Take a look at the post I made on university, where I tell my personal experience, my doubts, my fears and my advice for newly enrolled students -\u003e University I don‚Äôt know what else to say, so I‚Äôd say that‚Äôs okay My Badges TryHackMe Profile Badge TryHackMe Linux PrivEsc TryHackMe Hash Cracker HackTheBox Profile Badge Skills These are my skills: Languages I know: C# Python Java C / $LaTeX$ SQL Markdown IDE I use: Visual Studio Code Visual Studio 2019 Ecplise SQL developer (YES I know it‚Äôs not an IDE, but a GUI interface to the Oracle Database, but I don‚Äôt care üòÑ) Other: NeoVim Git GitHub I‚Äôm also learning to use linux via the Pop!_os operating system Photo of me Link qui My project I created various software, so in my lost time, which allowed me to deepen my knowledge of various languages (C# and SQL in particular) here they are: FlappyBird C# Version developed in C# and SQL Blood Bank Management System App developed in C# and SQL Bank App developed in Java CryptoTool developed in C# PortScanner developed in Java (it only works locally, of course) Oh,yeah‚Ä¶ Yeah, I forgot PHP, but let‚Äôs face it, who the f*ck likes PHP, let‚Äôs be real (But yeah, I know PHP too) ","date":"2023-03-04","objectID":"/aboutme/:0:0","tags":["Me","Biografy"],"title":"About me","uri":"/aboutme/"}]