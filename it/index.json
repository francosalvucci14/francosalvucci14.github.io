[{"categories":null,"content":"Tesi TODO ","date":"2025-04-22","objectID":"/it/tesi_triennale/:0:0","tags":["Tesi","Python","Algoritmi"],"title":"Tesi","uri":"/it/tesi_triennale/"},{"categories":null,"content":"Intro Questo è il progetto che ho fatto, in collaborazione con i miei colleghi dell’Università, per l’esame di Basi di Dati e di Conoscenza (BDC) Il progetto rappresenta la realtà di una società di taxi (VroomA), che opera nel territorio di Roma Questo è solo il database, ovviamente sopra al database c’è un’interfaccia web per gli utenti e gli amministratori del sistema Obiettivi L’obiettivo principale di questo sistema è permettere agli utenti di organizzare gli spostamenti tramite taxi a seconda delle proprie esigenze, del tipo di veicolo scelto e del costo della tratta scelta. Da un punto di vista societario, gli obiettivi sono quelli di valutare la qualità del lavoro degli autisti tramite i feedback forniti dai clienti e migliorare dove possibile il servizio. Servizi I ruoli aziendali sono i seguenti: Autisti Manutentori Gli autisti potranno scegliere se accettare o rifiutare la corsa, specificando in questo caso la motivazione del rifiuto. Inoltre potranno lasciare un feedback all’utente riguardo il comportamento prima e durante la corsa. Ogni autista ha la propria macchina privata, e può contattare i manutentori aziendali in caso di guasto del veicolo. Ad ogni autista sono assegnati uno o più turni di lavoro, con il vincolo che il singolo autista non può essere assegnato a due turni lavorativi che hanno orario inizio e orario fine uguali. I manutentori possono ricevere richieste di assistenza da parte degli autisti e contattare le officine convenzionate per effettuare il lavoro di assistenza. Le officine non fanno parte della società. Le tipologie di veicolo disponibili sono le seguenti: Base: 4 posti disponibili Plus: 7 posti disponibili, adibito a trasporto di carrozzine per disabili Premium: 12 posti disponibili, adibito a trasporto di carrozzine per disabili Ogni veicolo, identificato in modo univoco dalla targa, per poter circolare, deve essere assicurato. Quando si prenota una corsa (tratta) si possono scegliere due punti: Partenza, ovvero la via da dove si vuole iniziare la corsa Arrivo, ovvero la via in cui termina la corsa Ogni prenotazione può essere accettata o rifiutata in base a determinate esigenze dell'utente (Es: prenotazione effettuata per errore) e dell'autista (Es: indisponibilità al servizio). Ad ogni tratta completata è associato un feedback che può essere lasciato sia dall'utente che dall'autista. Ogni utente può effettuare illimitate richieste di prenotazione, in base alle necessità personali (numero di passeggeri, persone con disabilità, punto di ritiro, punto di rilascio), con il vincolo di una corsa per volta. A corsa completata l'utente può lasciare un feedback con un numero di stelle (da 1 a 5) e un commento. Ogni utente deve aggiungere una carta con cui effettuare il pagamento relativo alla tratta effettuata, in un secondo momento potrà aggiungere altri metodi di pagamento secondo le proprie esigenze. Ogni utente può aggiungere alla lista dei preferiti ua qualunque delle tratte effettuate da lui, scegliendo se aggiungere solo la tratta o anche l’autista. Ogni utente può accedere alla cronologia delle prenotazioni effettuate. Schemi Qui possiamo vedere gli schemi della base di dati da noi fatta ","date":"2023-09-27","objectID":"/it/database-project/:0:0","tags":["Project","MySql"],"title":"Progetto DataBase","uri":"/it/database-project/"},{"categories":null,"content":"Schema Concettuale Schema Concettuale ","date":"2023-09-27","objectID":"/it/database-project/:0:1","tags":["Project","MySql"],"title":"Progetto DataBase","uri":"/it/database-project/"},{"categories":null,"content":"Schema Logico Schema Logico Codice Per vedere nel dettaglio il codice, compreso di file per la creazione delle tabelle in SQL, e file usato per la creazione di inserimenti automatici, rimando alla mia repository di Github Progetto Database ","date":"2023-09-27","objectID":"/it/database-project/:0:2","tags":["Project","MySql"],"title":"Progetto DataBase","uri":"/it/database-project/"},{"categories":null,"content":"Inserimenti Automatici in Python import random from faker import Faker import string import decimal import datetime from geopy.geocoders import Nominatim def getLatAndLong(posto): # calling the Nominatim tool and create Nominatim class loc = Nominatim(user_agent=\"Geopy Library\") # entering the location name getLoc = loc.geocode(posto) return getLoc.latitude, getLoc.longitude def prendi_due_elementi(array): # Scegli due indici casuali indice1, indice2 = random.sample(range(len(array)), 2) # Se gli elementi sono uguali, scegli un nuovo indice2 while array[indice1] == array[indice2]: indice2 = random.randint(0, len(array) - 1) return array[indice1], array[indice2] fake = Faker(\"it_IT\") #Funzione Rand.DDN def genRandomDate(): start_date = datetime.date(1975, 1, 1) end_date = datetime.date(2001, 12, 30) num_days = (end_date - start_date).days rand_days = random.randint(1, num_days) random_date = start_date + datetime.timedelta(days=rand_days) return random_date #Funzione Rand.DA def genRandomInsuranceDate(): start_date = datetime.date(2023, 1, 1) end_date = datetime.date(2025, 1, 1) num_days = (end_date - start_date).days rand_days = random.randint(1, num_days) random_date = start_date + datetime.timedelta(days=rand_days) return random_date #Funzione Rand.CD def genRandomCardDate(): start_date = datetime.date(2027, 1, 1) end_date = datetime.date(2034, 12, 30) num_days = (end_date - start_date).days rand_days = random.randint(1, num_days) random_date = start_date + datetime.timedelta(days=rand_days) return random_date #Funzione Rand.PD def genRandomLicenceDate(): start_date = datetime.date(2025, 1, 1) end_date = datetime.date(2035, 12, 30) num_days = (end_date - start_date).days rand_days = random.randint(1, num_days) random_date = start_date + datetime.timedelta(days=rand_days) return random_date #Funzione Rand.DDR def genRandomRequestDate(): start_date = datetime.date(2020, 1, 1) end_date = datetime.date(2024, 2, 16) num_days = (end_date - start_date).days rand_days = random.randint(1, num_days) random_date = start_date + datetime.timedelta(days=rand_days) return random_date #Funzione Rand.Mail def generateEmail(name, surname): domain = fake.domain_name() return f\"{name}.{surname}@{domain}\" #Funzione Rand.T def generateTarga(): SYMBOLS = \"ABCDEFG\" SYMBOLS_END = \"HIJKLMNOPQR\" NUMBERS = \"0123456789\" start = \"\".join(random.choice(SYMBOLS) for i in range(1)) start_2 = \"\".join(random.choice(SYMBOLS_END) for i in range(1)) mezzo = \"\".join(random.choice(NUMBERS) for i in range(3)) fine = \"\".join(random.choice(SYMBOLS) for i in range(2)) return start+start_2+mezzo+fine #Funzione Rand.PSW def generatePsw(): ALL = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\" psw = \"\".join(random.choice(ALL) for i in range(9)) return psw #Funzione Rand.CN def generateCardNumber(): NUMBERS = \"0123456789\" number = \"\".join(random.choice(NUMBERS) for i in range(16)) return number #Funzione Rand.Star def checkStelleUtenti(stelle): if stelle == 1: return 1 elif stelle == 2: return 2 elif stelle == 3: return 3 elif stelle == 4: return 4 elif stelle == 5: return 5 print(\"Inizio esecuzione...\") print(\"L'ORDINE DI ESECUZIONE DEI FILE È 1.txt,2.txt,etc...\") print(\"Inizio Creazione 1.txt\") SYMBOLS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" NUMBERS = \"0123456789\" ALL_SYMBOLS = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\" print(\"Inizio Creazione 2.txt\") f = open(\"2.txt\",\"w+\") print(\"--------------- Inizio Inserimento Patente\\n\") patenti = [\"B\",\"BE\",\"B96\"] unique_Patente = [] values_patenti = [] for i in range(3000): data = genRandomLicenceDate() random_numpatente = \"\".join(random.choice(ALL_SYMBOLS) for i in range(9)) categoria = \"\".join(random.choice(patenti) for i in range(1)) unique_Patente.append(random_numpatente) query = \"('\"+ random_numpatente+ \"','\"+ str(data)+ \"','\"+ categoria+ \"')\" values_patenti.append(query) f.write( \"INSERT INTO Patenti (NumeroPatente,DDS,Categoria) VALUES \"+\",\\n\".join(values_patenti)+\";\" ) f.write(\"\\n\") print(\"--------------- Fine Inserime","date":"2023-09-27","objectID":"/it/database-project/:0:3","tags":["Project","MySql"],"title":"Progetto DataBase","uri":"/it/database-project/"},{"categories":null,"content":"Idea L’idea di questo progetto è venuta ad un mio compagno di corso, Simone Zheng. L’idea è quella di creare uno scraper che vada ad analizzare e “studiare” i dati presenti sui siti di immobili, in modo da riuscire ad analizzare i vari annunci, selezionati per zona, e a calcolare quale tra le case/appartmenti in vendita conviene comprare e quali invece conviene non guardare proprio Attualmente, tutte le funzioni che si interessano di calcolare quale tra gli annunci sia il migliore, basandosi su stipendio medio, IRPEF e tc , sono ancora in fase di sviluppo Attualmente, lo scraper si occupa solo di prelevare i dati dai siti di immobili, e calcolare il costo medio per zona degli immobili. Codice Il codice dello scraper è fatto in python. Le librerie utilizzate sono state : BeautifulSoup Pandas Requests Sys Getopt Sono state implementate anche le funzioni per prendere in input, da terminale, dei valori che andranno a settare la zona di interesse e il tipo di immobile che si vuol cercare Questo è stato realizzato in questo modo arg_zone = \"\" arg_type = \"\" arg_help = \"Help: -z \u003czone\u003e -t \u003ctype\u003e\".format(argv[0]) try: opts, args = getopt.getopt(argv[1:], \"hz:t:\", [\"help\", \"zone=\", \"type=\"]) except: print(arg_help) sys.exit(2) for opt, arg in opts: if opt in (\"-h\", \"--help\"): print(arg_help) # print the help message sys.exit(2) elif opt in (\"-z\", \"--zone\"): arg_zone = arg elif opt in (\"-t\", \"--type\"): arg_type = arg if arg_type == \"all\": arg_type = \"case\" All’interno troviamo anche una funzione che va a cercare quanti risulsati sono stati trovati sul sito, in modo da poter scorrere le varie pagine tramite un ciclo for, che incrementa il valore page= del sito. Il codice finale risulta essere questo # Importare moduli import requests import pandas as pd from bs4 import BeautifulSoup import sys import getopt import math # Indirizzo sito web def FindNumber(string): empty_string = \"\" for m in string: if m.isdigit(): empty_string = empty_string+m return int(empty_string) def SearchNumberOfElements(type,zone): url = f\"https://www.immobiliare.it/vendita-{type}/roma/{zone}/?criterio=rilevanza\u0026noAste=1\" response = requests.get(url) # Analizzare documento HTML del codice sorgente con BeautifulSoup html = BeautifulSoup(response.text, 'html.parser') number_of_el = html.find('div', class_=\"in-searchList__title\") value = number_of_el.text split = value.split() number = split[0] return int(number) def search(argv): # Import argument from terminal arg_zone = \"\" arg_type = \"\" arg_help = \"Help: -z \u003czone\u003e -t \u003ctype\u003e\".format(argv[0]) try: opts, args = getopt.getopt(argv[1:], \"hz:t:\", [\"help\", \"zone=\", \"type=\"]) except: print(arg_help) sys.exit(2) for opt, arg in opts: if opt in (\"-h\", \"--help\"): print(arg_help) # print the help message sys.exit(2) elif opt in (\"-z\", \"--zone\"): arg_zone = arg elif opt in (\"-t\", \"--type\"): arg_type = arg if arg_type == \"all\": arg_type = \"case\" locali_tot = [] price_tot = [] cycle = SearchNumberOfElements(arg_type,arg_zone) print(f\"Numeri di elementi trovati : {cycle}\") pagine = math.ceil(cycle/25) print(\"Inizio scansione e raccolta dati\") if pagine == 1: url = f\"https://www.immobiliare.it/vendita-{arg_type}/roma/{arg_zone}/?criterio=rilevanza\u0026noAste=1\" print(url) # Eseguire richiesta GET response = requests.get(url) # Analizzare documento HTML del codice sorgente con BeautifulSoup html = BeautifulSoup(response.text, 'html.parser') # Estrarre tutte le citazioni e gli autori dal documento HTML locali_html = html.find_all('a', class_=\"in-card__title\") price_html = html.find_all( 'li', class_=\"nd-list__item in-feat__item in-feat__item--main in-realEstateListCard__features--main\") # Raccogliere le citazioni in un elenco locali = list() for locale in locali_html: locali.append(locale.text) # Raccogliere gli autori in un elenco prices = list() for price in price_html: prices.append(price.text) locali_tot += locali price_tot += prices else: for i in range(1, pagine+1): url = f\"https://www.immobiliare.it/vendita-{arg_type}/roma/{arg_zo","date":"2023-04-24","objectID":"/it/webscraper/:0:0","tags":["Project","WebScraper","Python","Csv"],"title":"WebScraper","uri":"/it/webscraper/"},{"categories":null,"content":"P. S Piccolo reminder: Si ricorda che lo scraping di dati online è del tutto LEGALE, la cosa imporatate è che bisogna rimanere entra un certo range di scansioni al giorni, ma per il resto è tutto legale dato che dal momento che un certo dato viene pubblicato su un sito web, ogni persona può accedervi senza alcun problema. Grazie 😄 ","date":"2023-04-24","objectID":"/it/webscraper/:0:1","tags":["Project","WebScraper","Python","Csv"],"title":"WebScraper","uri":"/it/webscraper/"},{"categories":null,"content":"P. P. S Lo scraper non è neanche alla sua versione beta, oserei dire che si torva nella versione gamma ancora 😄, pertanto ogni critica/modifica/consiglio è ben accetta/o ","date":"2023-04-24","objectID":"/it/webscraper/:0:2","tags":["Project","WebScraper","Python","Csv"],"title":"WebScraper","uri":"/it/webscraper/"},{"categories":null,"content":" Premessa, questo è il progetto di cui vado più fiero 😄 Idea asdasd Realizzazione Servizi Gameplay Codice ","date":"2023-03-29","objectID":"/it/flappybird/:0:0","tags":["Project","FlappyBird","C sharp","MySql"],"title":"FlappyBird","uri":"/it/flappybird/"},{"categories":null,"content":"L’università asdasasd Le difficoltà Pensieri e consigli ","date":"2023-03-20","objectID":"/it/universit%C3%A0/:0:0","tags":["Università"],"title":"Università","uri":"/it/universit%C3%A0/"},{"categories":null,"content":"Idea L’idea mi è venuta totalmente random, mentre non facevo un bel niente 😂 Ho visto qualche video su youtube e mi sono deciso di approcciarmi a questa “challenge” (mettiamola tra virgolette perchè poi si vedrà che non è una vera e propria challenge) L’idea che sta alla base è molto semplice, un’interfaccia (chiamiamola HOME) dove ci sono i collegamenti alle altre interfacce : Prelievo, Deposito, Show Utenti e cos' via… Servizi I servizi offerti da questa app sono : Prelievo dei soldi dal conto Deposito soldi sul conto Show degli utenti Ricerca conto tramite nome account Cambio numero account tramite nome utente Realizzazione L’app è stata realizzata tramite il linguaggio Java, e utilizza un database MySql per lo storage e modifica dei dati L’ide utilizzato è Ecplise Tutte le interfaccie sono state realizzate tramite Java AWT, quindi il codice risulterà poco chiaro (allego immagini delle interfacce) Codice Il codice di questa applicazione lo trovate tutto sul mio GitHub Link qui –\u003e Bank App Queste sono gli screenshots delle varie interfacce Home Page: Home page Cambio Dettagli Account: Cambia Dettagli Account Prelievo: Prelievo Registra Utente: Registra Utenti Show degli utenti: Ricerca Utenti Database Il database è stato realizzato su DBMS MySql, ed è organizzato in questo modo: Ci sono due tabelle, “Utenti” e “Credito” Nella tabella Utenti ci sono i seguenti campi: UID -\u003e User ID (chiave primaria) User -\u003e Nome utente Pass -\u003e Password NConto -\u003e Numero del conto corrente Nella tabella Credito ci sono i seguenti campi: CID -\u003e Conto ID (chiave primaria) UserID -\u003e User ID (chiave secondaria relativa alla chaive UID della tabella Utenti) Credito -\u003e Credito del conto Ogni volta che un’utente viene inserito nello schema, gli viene dato un numero di conto in modo random, con credito 0, e nel DB viene collegato alla tabella Credito Le tabelle sono collegate da una relazione 1:1 ","date":"2023-03-10","objectID":"/it/bankapp/:0:0","tags":["Project","Bank App","Java","MySql"],"title":"Bank App","uri":"/it/bankapp/"},{"categories":null,"content":"Me Ciao, sono Salvucci Franco. Sono uno studente della Facoltà di Informatica dell’Università di Tor Vergata Sono sempre stato appassionato del mondo della programmazione e dell’informatica in generale (sia lato software che hardware, ma soprattutto software 😄) Adoro sperimentare nuove tecnologie (come questa qui, ovvero Hugo) e adoro cimentarmi sempre in nuove sfide di progettazione/programmazione/ecc… P.S : Dai un’occhiata al post che ho fatto sull’università, dove racconto la mia esperienza personale, i miei dubbi, le mie paure e i miei consigli per i ragazzi appena iscritti -\u003e Università Non so cosa altro dire, quindi direi che va bene così Lauree Laurea Triennale : mi sono Laureato con voto 100/110 in Informatica Triennale presso l’Università degli Studi di Roma Tor Vergata. Se vuoi leggere la mia tesi vedi qui : La mia repository su GitHub -\u003e Tesi(GitHub) Il mio post su questo sito -\u003e Tesi Laurea Magistrale : In corso I miei badge TryHackMe Badge del profilo TryHackMe Linux PrivEsc TryHackMe Hash Cracker HackTheBox Badge del profilo Skills Queste sono le mie competenze: Linguaggi che conosco: C# Python Java C / $\\LaTeX$ SQL Markdown IDE che uso: Visual Studio Code Visual Studio 2019 Ecplise SQL developer (SI lo so che non è un IDE, ma un’interfaccia grafica per il Db Oracle, ma non mi importa 😄) Altro: NeoVim Git GitHub Sto anche imparando ad usare linux tramite il sistema operativo Pop!_os Foto mia Link qui I miei progetti Ho realizzato vari software, a tempo perso, che mi hanno permesso di approfondire la conoscenza di vari linguaggi (C# e SQL in particolare) Eccoli: FlappyBird C# Version sviluppato in C# e SQL Blood Bank Management System App sviluppato in C# e SQL Bank App sviluppato in Java CryptoTool sviluppato in C# PortScanner sviluppato in Java (funziona solo in locale, ovviamente) Ops… Sì, ho dimenticato PHP, ma ammettiamolo, a chi cazzo piace PHP, siamo realistici (Ma sì, conosco anche PHP) ","date":"2023-03-04","objectID":"/it/aboutme/:0:0","tags":["Me","Biografy"],"title":"Su di me","uri":"/it/aboutme/"}]